/**
 * 函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），
 * 保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，
 * 那么在A的调用帧上方，还会形成一个B的调用帧。
 * 等到B运行结束，将结果返回到A，B的调用帧才会消失。
 * 如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。
 * 所有的调用帧，就形成一个“调用栈”（call stack）。
 *
 * 尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，
 * 因为调用位置、内部变量等信息都不会再用到了，
 * 只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。
 */
function upperStr(str) {
    return str.toUpperCase();
}
function test(a) {
    return upperStr(a);
}

console.log(test('a'));